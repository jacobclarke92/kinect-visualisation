#!/usr/bin/env node

var portNum = 5600;

var skipColour = false;
var skipMidi = false;
var skipKinect = false;
var skipEffectsList = false;
var autoLaunch = false;
var devMode = false;
var verbose = false;

var isWin = /^win/.test(process.platform);

//util modules
var fs = require('fs');
var colors = require('colors/safe');
var clear = require('clear');

var sys = require('sys');
var tty = require('tty');
var keypress = require('keypress');
var exec = require('child_process').exec;
var child;

var kinect;
var midi;

// For this to work run `npm install kinect`
// I found that it didn't always compile on different computers so i left it out of the package file
var goodKinectLibrary = false

if (!fs.existsSync('./node_modules/kinect')) {
    console.log(colors.red('Kinect module doesnt exist -- skipping'));
}else{
	kinect = require('kinect');
	goodKinectLibrary = true;
}
if (!fs.existsSync('./node_modules/midi')) {
    console.log(colors.red('MIDI module doesnt exist -- skipping'));
    skipMidi = true;
}else{
	midi = require('midi');
}
if(isWin) {
	console.log(colors.yellow('On windows -- skipping mac kinect module'));
	skipKinect = true;
}

clear();
console.log('\
                      O          o                            o  \n\
                     / \\         | o           o              |  \n\
                    o---oo  o  o-O   o-o o   o   o-o o  o  oo |  \n\
                    |   ||  | |  | | | |  \\ /  |  \\  |  | | | |  \n\
                    o   oo--o  o-o | o-o   o   | o-o o--o o-o-o  \n\
                                                                 \n\
                                                                 \n\
            o--o      o                                          \n\
            |         |                                          \n\
            O-o  \\ / -o- o-o  oo o   o  oo o--o  oo o-o  o-o  oo \n\
            |     o   |  |   | |  \\ /  | | |  | | | |  |  /  | | \n\
            o--o / \\  o  o   o-o-  o   o-o-o--O o-o-o  o o-o o-o-\n\
                                              |                  \n\
                                           o--o                  \n\
\n');

console.log(colors.bold('Kinect status: '));


var app = require('http');
var httpRequest = require('http-request');
var url = require("url");
// var BufferStream = require('bufferstream'); //npm bufferstream
// var WebSocketServer = require('ws').Server; //npm ws
// var websocket = require('websocket-stream'); //npm websocket-stream
var BufferedNetstringStream = require('./app/libs/netstring').BufferedNetstringStream;


//compilation modules
var chokidar = require('chokidar');
var less = require('less');

var clients = [];

var selectPort = 0;

console.log('\n');

app.globalAgent.maxSockets = 500;

console.reset = function () { return process.stdout.write('\033c') }
//console.reset();

if(process.argv.length > 2) {
	var params = process.argv.slice(2);

	for(var i=0; i < params.length; i++) {
		
		var param = params[i];
		if(param.indexOf('-port') === 0) {
			skipMidi = false;
			selectPort = parseInt( param.substring(5,param.length) );
		}
		else if(param.indexOf('-skipmidi') === 0) skipMidi = true;
		else if(param.indexOf('-skipcolour') === 0) skipColour = true;
		else if(param.indexOf('-skipeffectslist') === 0) skipMidi = true;
		else if(param.indexOf('-skipkinect') === 0) skipKinect = true;
		else if(param.indexOf('-autolaunch') === 0) autoLaunch = true;
		else if(param.indexOf('-devmode') === 0) devMode = true;
		else if(param.indexOf('-verbose') === 0) verbose = true;
	}
}else{
	console.log(colors.bold("No params given!"));
	console.log("\
-portXX        selects the approriate MIDI port\n\
-skipmidi      don't even listen for MIDI\n\
-skipcolours   doesn't attempt to download the top colour palettes from Colour Lovers\n\
-devmode       watches changes in .less and .js files and recompiles accordingly\n\
-verbose       logs extra info, use for debugging\n\
");
}

var urlRules = [
	['.pde','text/processing'],
	['.png','image/png'],
	['.js','application/javascript'],
	['.html','text/html'],
	['.css','text/css'],
	['.json','text/event-stream'],
	['.xml','text/xml'],

	['.svg','image/svg+xml'],
	['.ttf','application/x-font-ttf'],
	['.otf','application/x-font-opentype'],
	['.woff','application/x-font-woff'],
	['.eot','application/vnd.ms-fontobject'],

	['.ico','image/x-icon']
];


//start doing stream data stuff
var id = 0;

function stream(req, res) {
	res.writeHead(200, {
		'Content-Type':  'text/event-stream',
		'Cache-Control': 'no-cache',
		'Connection':    'keep-alive'
	});

	clients.push(res);

	req.on('close', function() {
		var index = clients.indexOf(res);
		if (index != -1) {
			clients.splice(index, 1);
		}

	});
}

var appServer = app.createServer(function(req, res) {

	var parsedURL = url.parse(req.url, true);
	var pathname = parsedURL.pathname;
	// console.log(pathname);

	var reqURL = __dirname + req.url;
	if(pathname == '/') reqURL = __dirname + '/app/index.html';
	
	if (pathname == '/app/midi.json') {
		
		stream(req, res, 'text/event-stream');
		if(verbose) console.log('midi stream requested');

	}else if (pathname == '/images') {

		stream(req, res, 'text/event-stream');
		if(verbose) console.log('kinect stream requested');		

	} else {
		var mimeType = false;
		for(var i=0; i< urlRules.length; i++) {
			if (reqURL.indexOf(urlRules[i][0]) > -1) {
				mimeType = urlRules[i][1];
				i = urlRules.length;
			}
		}
		if(!mimeType) mimeType = 'text/plain';
		fs.readFile(reqURL, function (err, data) {
			if (err) {
				res.writeHead(500);
				return res.end('Error loading ' +reqURL);
				console.log('Error loading ' +reqURL);
			}
			res.writeHead(200,{
				'Content-Type': mimeType
			});
			res.end(data);
		});
		/*
		
		*/
	}

});

function startServer() {
	process.stdin.resume();
	process.stdin.pipe(new BufferedNetstringStream).on('data', writeImage);
	appServer.listen(portNum);

	console.log(colors.green.bold('Node server started!')); 

	if(!autoLaunch) {

		var launchCmd;
		var launchUrl = 'http://localhost:'+portNum+'/';
		var startFullscreen = '';
		var ignoreMediaPermissions = '';//'--use-fake-ui-for-media-stream';
		// var startFullscreen = '--start-fullscreen ';
		if(isWin) 'chrome.exe '+startFullscreen+'"'+launchUrl+'"';
		else launchCmd = 'open -a "Google Chrome" --args '+startFullscreen+' "'+launchUrl+'" '+ignoreMediaPermissions+' ';

		child = exec(launchCmd, function (error, stdout, stderr) {
			if (error !== null) {
				console.log(colors.red('exec error: ' + error));
			}else{
				if(verbose) console.log(colors.green('Launching chrome in fullscreen now...'));
			}
		});
		child = exec('open -a "Soundflowerbed"', function (error, stdout, stderr) {
			if (error !== null) {
				console.log(colors.red('exec error: ' + error));
			}else{
				if(verbose) console.log(colors.green('Launching Soundflowerbed...'));
			}
		});
	}
}



function compileLess(path) {
	var fpath = path.replace(/\\/g, '/');
	var fname = fpath.substring(fpath.lastIndexOf('/')+1, fpath.lastIndexOf('.'));
	fpath = 'app/styles/generated/'+fname+'.css';
	fs.readFile(path,function(error,data) {
	    data = data.toString();
	    // console.log(data);
	    less.render(data, function (e, css) {
	        fs.writeFile(fpath, css.css, function(err){
	            if(verbose) console.log(colors.green('CSS compiled for ',path,' at ',fpath));
	        });
	    });
	});
}

var scriptsToCompile = [
	'./app/scripts/core/connections.js',
	'./app/scripts/helpers/outline_worker.js',
	'./app/scripts/helpers/find_blobs_worker.js',
	'./app/scripts/helpers/marchingsquares_worker.js',
];
var scriptLinks = [
	['./app/scripts/helpers/marchingsquares_worker.js', './app/scripts/helpers/find_blobs_worker.js']
];

var compiledScripts = 0;
function compileScript(_scriptName) {


	var scriptName = _scriptName;
	if(scriptName.indexOf('app/') === 0) scriptName = './'+scriptName;
	for(var i=0; i < scriptLinks.length; i++) {
		if(scriptLinks[i][0] == scriptName) {
			if(verbose) console.log('Swapping ~'+scriptName+'~ to ~'+scriptLinks[i][1]+'~');
			scriptName = scriptLinks[i][1];
		}
	}
	if(verbose) console.log('Compiling '+scriptName);

	var newName = scriptName.replace('.js','_built.js');
	child = exec('browserify '+scriptName+' -o '+newName, function (error, stdout, stderr) {
		if (error !== null) {
			console.log(colors.red('exec error: ' + error));
		}else{
			if(verbose) console.log(colors.green('JS compiled for '+scriptName));
			compiledScripts ++;
			if(compiledScripts == scriptsToCompile.length) startServer();
		}
	});

	

}
function compileScripts() {

	if(verbose) console.log('Browserifying JS files');

	for(var i=0; i < scriptsToCompile.length; i ++) {
		compileScript(scriptsToCompile[i]);
	}
}

compileLess('./app/styles/ui.less');
compileLess('./app/styles/core.less');
compileScripts();
if(devMode) {

	var lessWatcher = chokidar.watch('file', {
	  ignored: /[\/\\]\./, persistent: true
	});
	lessWatcher.on('change', function(path, stats) {
		compileLess(path);
	});
	lessWatcher.add('./app/styles/*.less');

	var scriptWatcher = chokidar.watch('file', {persistent: true});
	scriptWatcher.on('change', function(path, stats) {
		compileScript(path);
	});

	for(var i=0; i < scriptsToCompile.length; i ++) {
		scriptWatcher.add(scriptsToCompile[i]);	
	}
	

}

if(!skipEffectsList) {

	var effects = [];
	var effectsScanned = 0;
	fs.readdir('./effects/',function(err, files) {
		if(!err) {

			if(files.length > 0) {
				var totalEffects = files.length;

				if(verbose) console.log('Scanning effects folder...');
				files.forEach(function(file) {
					if(file.indexOf('effect_') === 0) {
						fs.readFile('./effects/'+file, 'utf8', function(err,data) {
							if(err) {
								console.log(colors.red('Error reading '+file+'! Check your permissions.'));
							}else if(data.indexOf('//exclude') != 0) {
								effects.push(file.substring(7,file.length-3));
							}else{
								if(verbose) console.log('Exluding '+file+', as per the //exclude comment on line 1');
							}

							if(++effectsScanned >= totalEffects) {

								if(verbose) console.log(effects.length+' effects scanned');
								var str = 'effects = ["'+effects.join('", "')+'"];';
								fs.writeFile('./app/scripts/effects_list.js', str, function() {
									if(err) console.log(colors.red('Unable to save effects list! Check your writable permissions.'));
								});
							}

						});
					}else totalEffects--;
				});
				
				// fs.writeFile()

			}else{
				console.log(colors.red('No effect files in effects folder ... um send help.'));
			}
		}else{
			console.log(colors.red('Error scanning effects folder... very problematic! Check your folder permissions.'));
		}
	});

}




var midi;
var inputs;
var outputs;

if(!skipMidi) {

	var input = new midi.input();
	var ports = input.getPortCount();

	if(ports > 0) {

		if(ports < selectPort) {
			console.log(colors.yellow("Unable to use port "+selectPort+". Reverting to 0"));
			selectPort = 0;
		}

		if(ports.length > 1) {

			console.log(colors.blue(ports+" MIDI ports available"));
			for(var i=0; i<ports; i++) {
				console.log('-port'+i+': '+input.getPortName(i));
			}
		}

		console.log(colors.green.bold('Using MIDI port '+selectPort+': '+input.getPortName(selectPort)));

		input.on('message', function(deltaTime, message) {
			if(verbose) console.log('m:' + message + ' d:' + deltaTime);
			clients.forEach(function(client) {
				client.write('data: ' + message.join(' ') + '\n\n');
			});
		});

		input.openPort(selectPort);

	}else{
		if(isWin) console.log(colors.yellow('No MIDI devies found. http://www.midiox.com/ is a good MIDI diagnosis utility.'));
		else console.log(colors.yellow('No MIDI devies found. Check `Audio MIDI Setup` app (mac).'));
	}

}else{
	console.log('Skipping midi setup');
}

//get top colours xml

if(!skipColour) {
	if(verbose) console.log('Attempting to download top colour palettes...')
	httpRequest.get('http://www.colourlovers.com/api/palettes/top?numResults=24', './app/palettes.xml', function (error, result) {
			if (error) {
				console.log(colors.red('Error getting xml file. The API must be dead, let me know at jacobclarke92@gmail.com ',error));
			} else {
				if(verbose) console.log(colors.green('Colour palette downloaded to: ' + result.file));
			}
	});
}else{
	console.log('Skipping colour palette download');
}


// ~~			   ~~ //
// ~~ kinect stuff ~~ //
// ~~ 			   ~~ //

//init camera controls

var wss;
var kstream;
var kcontext;

// this method of getting kinect data wasn't working out, hence the logic
if(goodKinectLibrary && 1 == 0) {

	console.log('Initialising kinect motor controls!');


	kcontext = kinect();
	kstream = new BufferStream();
	wss = new WebSocketServer({server: appServer});

	//init socket stream
	wss.on('connection', function(ws) {
		var stream = websocket(ws);
		kstream.pipe(stream);
		console.log("connection made");
		ws.on('close', function() {
			stream.writable = false;
			console.log('closed socket');
		});

	});
	
	//init kinect depth data stream
	kcontext.resume();
	kcontext.start('depth');

	kcontext.on('depth', function (buf) {
	  kstream.write(buf);
	});

	kcontext.resume();

	//init terminal kinect controls
	var kinectAngle = 0;
	updateKinectAngle(0);

	// keypress(process.stdin);
	// process.stdin.on('keypress', function (ch, key) {

	//   if(key.name == 'up') updateKinectAngle(1);
	//   else if(key.name == 'down') updateKinectAngle(-1);

	//   if (key && key.ctrl && key.name == 'c') process.exit(0);//process.stdin.pause(); // die gracefully
	// });
	// process.stdin.setRawMode(true);
	// process.stdin.resume();


}

function updateKinectAngle(amt) {
  if(kinectAngle+amt <= 15 && kinectAngle+amt >= -15) {
    kinectAngle += amt;
    for(var i = -15, str=''; i < 15; i ++) str += (i == kinectAngle) ? '|' : '-';
    console.log('adjusting tilt: '+str);
    // console.log(kcontext);
    kcontext.tilt(kinectAngle);
  }
}


var id2 = 0;
function writeImage(image) {

	// console.log('writing image');

	var uri = 'data:image/png;base64,' + image.toString('base64');

	clients.forEach(function(client) {
		client.write('id: ' + id2 + '\n');
		client.write('data: ' + uri + '\n\n');
	});

	id2++;
}